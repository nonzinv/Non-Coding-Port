"""
Non Pronanun
CSE 163 AD

This file contains methods according to the spec given in the
A6 Mapping. The file's dataset for analysis here is regarding food
deserts in Washington and the visualizations generated by this file
hopes to show points of analysis in these food deserts.
It contains load_in_data, percentage_food_data, plot_map,
plot_population_map, plot_population_countries, plot_food_access_by_county,
plot_low_access_tracts. This file will generate 5 plots, and
return one float value.
"""


import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt


def load_in_data(shp_file_name: str, csv_file_name: str) -> gpd.GeoDataFrame:
    """
    this function loads in the data from a csv file and a shp file. It combines
    the file together by joining them together to return a GeoDataFrame
    to be used in mapping the data.
    """
    df1 = gpd.read_file(shp_file_name)
    df2 = pd.read_csv(csv_file_name)
    return df1.merge(df2, left_on='CTIDFP00',
                     right_on='CensusTract', how='left')


def percentage_food_data(state_data: gpd.GeoDataFrame) -> float:
    """
    This function takes in the GeoDataFrame that was created in the method
    above it finds the percentage of census tracts in Washington in which we
    have the data for -- which means that we are filtering out the rows with
    missing data. It returns a float for the percentage of rows that have
    complete data.
    """
    not_na = state_data.dropna()
    return (len(not_na) / len(state_data)) * 100


def plot_map(state_data: gpd.GeoDataFrame) -> None:
    """
    This method takes in a GeoDataFrame, with the data for Washington State,
    it wil plot the map of Washington out, and save it.
    """
    state_data.plot()
    plt.title("Washington State")
    plt.savefig("map.png")


def plot_population_map(state_data: gpd.GeoDataFrame) -> None:
    """
    This method takes in a GeoDataFrame, and maps out the State of Washington,
    except this map will be colored based on the population.
    """
    df = state_data
    fig, ax = plt.subplots()
    df.plot(ax=ax, color="#EEEEEE")
    washington = df[df['State'] == 'WA']
    washington.plot(ax=ax, column='POP2010', legend=True)
    plt.title("Washington Census Tract Populations")
    plt.savefig("population_map.png")


def plot_population_county_map(state_data: gpd.GeoDataFrame) -> None:
    """
    This method takes in a GeoDataFrame and it maps out the state of
    Washington, it maps out according to the population of each County
    and the color will be representing the population.
    """
    fig, ax = plt.subplots()
    df = state_data
    df.plot(ax=ax, color='#EEEEEE')
    washington = df[df['State'] == 'WA']
    washington = washington.dissolve(by='County', aggfunc=lambda x: x.sum())
    washington.plot(ax=ax, column='POP2010', legend=True)
    plt.title("Washington County Populations")
    plt.savefig("county_population_map.png")


def plot_food_access_by_county(state_data: gpd.GeoDataFrame) -> None:
    """
    This method takes in a GeoDataFrame, and plots out 4 maps.
    Each of these maps will be showing food access based on the income
    level: The first will be for those with low access half, the second
    is for low access and low income half. The third is for low access 10
    an the last one is for low access and low income 10.
    """
    df = state_data
    df = df[['County', 'geometry', 'POP2010', 'lapophalf', 'lapop10',
            'lalowihalf', 'lalowi10']]
    df = df.dissolve(by='County', aggfunc='sum')
    df['lapophalf_ratio'] = df['lapophalf'] / df['POP2010']
    df['lapop10_ratio'] = df['lapop10'] / df['POP2010']
    df['lalowihalf_ratio'] = df['lalowihalf'] / df['POP2010']
    df['lalowi10_ratio'] = df['lalowi10'] / df['POP2010']
    fig, [[ax1, ax2], [ax3, ax4]] = plt.subplots(2, 2, figsize=(20, 10))
    for ax in [ax1, ax2, ax3, ax4]:
        state_data.plot(ax=ax, color="#EEEEEE")
    df.plot(ax=ax1, column='lapophalf_ratio', legend=True, vmin=0, vmax=1)
    ax1.set_title('Low Access: Half')
    df.plot(ax=ax3, column='lapop10_ratio', legend=True, vmin=0, vmax=1)
    ax3.set_title('Low Access: 10')
    df.plot(ax=ax2, column='lalowihalf_ratio', legend=True, vmin=0, vmax=1)
    ax2.set_title('Low Access + Low Income: Half')
    df.plot(ax=ax4, column='lalowi10_ratio', legend=True, vmin=0, vmax=1)
    ax4.set_title('Low Access + Low Income: 10')
    plt.savefig('county_food_access.png')


def plot_low_access_tracts(state_data: gpd.GeoDataFrame) -> None:
    """
    This method takes in a GeoDataFrame. It maps the state of Washington by
    all the census tracts that are considered low access.
    """
    df = state_data
    urban = df[df['Urban'] == 1]
    urban = urban[(urban['lapophalf'] >= 500) |
                  ((urban['lapophalf'] / urban['POP2010']) >= 0.33)]
    rural = df[df['Rural'] == 1]
    rural = rural[(rural['lapop10'] >= 500) |
                  ((rural['lapop10'] / rural['POP2010']) >= 0.33)]
    fig, ax = plt.subplots(1)
    state_data.plot(ax=ax, color="#EEEEEE")
    not_na = state_data.dropna()
    not_na.plot(ax=ax, color="#AAAAAA")
    rural.plot(ax=ax)
    urban.plot(ax=ax)
    plt.title("Low Access Census Tract")
    plt.savefig('low_access.png')


def main():
    """
    This is the main method for the file.
    """
    state_data = load_in_data(
        '/course/food_access/tl_2010_53_tract00/tl_2010_53_tract00.shp',
        '/course/food_access/food_access.csv'
    )
    print(percentage_food_data(state_data))
    plot_map(state_data)
    plot_population_map(state_data)
    plot_population_county_map(state_data)
    plot_food_access_by_county(state_data)
    plot_low_access_tracts(state_data)


if __name__ == '__main__':
    main()